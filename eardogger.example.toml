# Eardogger config file
# Use the `--config <FILE>` option to pick a config location. If omitted,
# we try to find eardogger.toml in the current working directory.
#
# All the settings here are mandatory unless otherwise stated, and the
# app will fail to start if the config file isn't valid. Running the
# app binary with the `--status` option is an easy way to check the config
# before upgrading the server to a new version.
#
# All of the file/directory settings can be either relative or absolute paths.
# Relative paths are resolved relative to the config file's location.

# Whether we're running in production or not. Affects verbosity of 500 errors.
production = false

# About threads: YES, SORRY FUTURE SELF, making these into manual twiddles
# instead of using a heuristic is fiddly bullshit. However: By default,
# tokio will soak up "the number of cores available to the system" for
# its worker threads, which is ludicrous and is likely to provoke the
# ire of your web host. (Which might even turn out to be YOU, future self!)
# So there's no way around having to make decisions about resourcing, and
# there's no heuristic that's guaranteed to work well for both shared
# and dedicated hosting with all possible levels of traffic.
#
# In addition to these settings, keep in mind there's always one
# additional thread each for:
#
# - The main thread
# - The singleton DB writer
# - The singleton logfile appender
#
# For the smoothest flavor, ensure (runtime_threads + reader_threads + 3?)
# is â‰¤ your number of virtual CPU cores. Anyway, assuming you don't hit a
# cgroup resource cap or send the OS into thrash with excessive thread
# park/wake traffic, these thread counts will be the limiting factor for
# how much parallel traffic the app can *actually* field. Possibly a
# load test is in order one of these days.

# How many OS threads the Tokio runtime will use for workers. Must be > 0.
runtime_threads = 4

# How many DB reader threads to cap out at. Must be > 0.
reader_threads = 2

# Whether to check the integrity of database migrations on every startup.
# If migrations are behind or corrupt, the app will exit instead of
# potentially messing up user data.
validate_migrations = true

# The site's own public-facing base URL.
public_url = "http://localhost:3000"

# Locations of important files.
db_file = "dev.db"
assets_dir = "public"
key_file = "cookie_key.bin"

[log]
# An EnvFilter string, as described in the tracing-subscriber docs:
# https://docs.rs/tracing-subscriber/0.3.18/tracing_subscriber/filter/struct.EnvFilter.html
filter = "info"
# Whether to log to stdout. In local dev that's your terminal, and in a
# PaaS it's probably some log collector service. But in mod_fcgid, it
# goes to Apache's MAIN ErrorLog file (NOT your vhost's ErrorLog),
# which you almost certainly do not want. So use log.file instead.
stdout = true

# The whole log.file section is optional. If present, we write rolling
# daily "<name>.<timestamp>.log" files to <directory>, keeping <days>
# days worth and deleting any older ones.
[log.file]
# The directory to use for log files.
directory = "logs"
# The log file prefix. Files will have names like <name>.<timestamp>.log.
name = "eardogger"
# How many days of logs to keep. Excess logs are auto-deleted.
days = 5

# Choose ONE group of mode settings, either http or fcgi.
[mode.http]
# The port to listen on.
port = 3000

# or, alternately:
# [mode.fcgi]
# The maximum number of connections to serve at once. Above this number,
# new connections will have to wait and will get higher latency.
# max_connections = 50
